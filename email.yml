openapi: 3.0.3
info:
  title: OpenAPI definition
  version: v0.1
servers:
  - url: http://localhost:8082
    description: Generated server url
paths:
  /api/v1/autotransport/emailservice/remindermails:
    post:
      tags:
        - MailHandler
      operationId: sendReminderMail
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ReminderMail'
        required: true
      responses:
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseError'
        '201':
          description: CREATED
  /api/v1/autotransport/emailservice/mails:
    post:
      tags:
        - MailHandler
      operationId: sendMail
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Mail'
        required: true
      responses:
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseError'
        '201':
          description: CREATED
  /api/v1/autotransport/emailservice/mails/read:
    post:
      tags:
        - MailHandler
      operationId: updateNotificationTable
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Mail'
        required: true
      responses:
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseError'
        '200':
          description: OK
##############################
components:
  schemas:
    ResponseError:
      type: object
      properties:
        status:
          type: string
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        message:
          type: string
        errors:
          type: array
          items:
            type: string
        url:
          type: string
    ReminderMail:
      required: [ emailAddress, subject, reminderBody, bidOrderCenterId ]
      type: object
      properties:
        emailAddress:
          type: array
          items:
            type: string
        subject:
          type: string
        reminderBody:
          $ref: '#/components/schemas/ReminderBody'
        bidOrderCenterId:
          type: string
    ReminderBody:
      type: object
      properties:
        wholesaler:
          type: string
        reminderRows:
          type: array
          items:
            $ref: '#/components/schemas/ReminderRow'
    ReminderRow:
      type: object
      properties:
        salesNumber:
          type: string
        routeIndex:
          type: string
        carrierRefNumber:
          type: string
        numberPieces:
          type: string
        totalActualLinearFeet:
          type: string
        packageType:
          type: string
        packageCharacteristics:
          type: array
          items:
            $ref: '#/components/schemas/PackageCharacteristics'
        deadline:
          type: string
        companyName:
          type: string
        address:
          type: string
    PackageCharacteristics:
      type: object
      properties:
        length:
          type: string
        width:
          type: string
        height:
          type: string
        weight:
          type: string
    Mail:
      required: [ emailAddress, subject, body, emailType, emailObjectType, emailObjectId ]
      type: object
      properties:
        emailAddress:
          type: array
          items:
            type: string
        subject:
          type: string
        wholesaler:
          type: string
        body:
          type: string
        emailType:
          $ref: '#/components/schemas/EmailType'
        emailObjectType:
          $ref: '#/components/schemas/EmailObjectType'
        emailObjectId:
          description: "The id of the object. i.e. tripRateId, insuranceDetailsId"
          type: integer
          format: int64
        referenceId:
          description: "The id reference in the email. i.e. customerId, vendorId, bidOrderCenterId."
          type: integer
          format: int64
    EmailType:
      type: string
      enum: [ AVAILABILITY, BOOKING, CONFIRMATION, RATE, EXPIRATION, SPOT_QUOTE, ONBOARDING ]
    EmailObjectType:
      type: string
      enum: [ TRIP_RATE, SHIPMENT_RATE, RATE, INSURANCE_DETAILS, NEW_CUSTOMER, NEW_VENDOR ]
    DocumentBase:
      required: [ businessId, parentId, filename, fileUrl, fileSize, documentStatus, documentType,subject,description ]
      type: object
      properties:
        id:
          type: integer
          format: int64
        businessId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
        fileName:
          type: string
          maxLength: 100
        subject:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        filePath:
          type: string
          maxLength: 255
        fileSize:
          type: integer
          format: int64
        createTimestamp:
          type: string
          format: date
        updateTimestamp:
          type: string
          format: date
        deleteTimestamp:
          type: string
          format: date
        documentStatus:
          $ref: '#/components/schemas/DocumentStatus'
        documentType:
          $ref: '#/components/schemas/DocumentType'
    DocumentStatus:
      type: string
      enum: [ INITIATE, SEND, ARCHIVED, ACCEPTED, DELETE ]
    DocumentType:
      type: string
      enum: [ VENDOR, CUSTOMER, BID_ORDER, INSURANCE ,POD, NOTE ]
    Document:
      required: [ businessId, parentId, filename, fileUrl, fileSize, documentStatus, documentType,subject,description ]
      type: object
      properties:
        id:
          type: integer
          format: int64
        businessId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
        fileName:
          type: string
          maxLength: 100
        subject:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        mediaType:
          type: string
          maxLength: 100
        fileKeys:
          type: string
          maxLength: 100
        temporalFileUrl:
          type: string
          maxLength: 100
        filePath:
          type: string
          maxLength: 255
        fileSize:
          type: integer
          format: int64
        createTimestamp:
          type: string
          format: date
        updateTimestamp:
          type: string
          format: date
        deleteTimestamp:
          type: string
          format: date
        documentStatus:
          $ref: '#/components/schemas/DocumentStatus'
        documentType:
          $ref: '#/components/schemas/DocumentType'
    EntityBase:
      required: [ id, validFrom, validTo ]
      type: object
      properties:
        id:
          type: integer
          format: int64
    DocumentForm:
      type: object
      properties:
        document:
          $ref: '#/components/schemas/Document'
        file:
          type: string
          format: byte
